<jqassistant-rules xmlns="http://schema.jqassistant.org/rule/v1.10"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://schema.jqassistant.org/rule/v1.10 http://schema.jqassistant.org/rule/jqassistant-rule-v1.10.xsd">

    <concept id="cdi:Produces">
        <providesConcept refId="jee-injection:Injectable"/>
        <description>Returns the types of Producer fields and the return types of Producer methods as Producers.
        </description>
        <cypher><![CDATA[
            MATCH
              (member:JEE:BeanProducer)-[:PRODUCES]->(:Type:JEE:Injectable)
            RETURN
              member AS Producer
        ]]></cypher>
    </concept>

    <concept id="cdi:Disposes">
        <description>Returns all disposer methods.
        </description>
        <cypher><![CDATA[
            MATCH
              (:Type)-[:DECLARES]->(disposeMethod:Method)-[:HAS]->(parameter:Parameter)-[:DISPOSES]->(:Type)
            RETURN
              disposeMethod AS DisposeMethod
        ]]></cypher>
    </concept>

    <concept id="cdi:Qualifier">
        <description>Returns all annotation types labeled with "CDI" and "Qualifier".
        </description>
        <cypher><![CDATA[
            MATCH
              (qualifier:Type:CDI:Qualifier)-[:ANNOTATED_BY]->()
            RETURN
              distinct qualifier AS Qualifier
        ]]></cypher>
    </concept>

    <concept id="cdi:Dependent">
        <description>Returns all beans, fields or methods labeled with "CDI" and "Dependent".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:Dependent)
            RETURN
              e AS DependentElement
        ]]></cypher>
    </concept>

    <concept id="cdi:RequestScoped">
        <description>Returns all beans, fields or methods labeled with "CDI" and "RequestScoped".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:RequestScoped)
            RETURN
              e AS RequestScopedElement
        ]]></cypher>
    </concept>

    <concept id="cdi:SessionScoped">
        <description>Returns all beans, fields or methods labeled with "CDI" and "SessionScoped".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:SessionScoped)
            RETURN
              e AS SessionScopedElement
        ]]></cypher>
    </concept>


    <concept id="cdi:ConversationScoped">
        <description>Returns all beans, fields or methods labeled with "CDI" and "ConversationScoped".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:ConversationScoped)
            RETURN
              e AS ConversationScopedElement
        ]]></cypher>
    </concept>

    <concept id="cdi:ApplicationScoped">
        <description>Returns all beans, fields or methods labeled with "CDI" and "ApplicationScoped".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:ApplicationScoped)
            RETURN
              e AS ApplicationScopedElement
        ]]></cypher>
    </concept>

    <concept id="cdi:InjectableClassType">
        <providesConcept refId="jee-injection:Injectable"/>
        <description>Returns all classes labeled with "CDI", "JEE" and "Injectable".
        </description>
        <cypher><![CDATA[
            MATCH
              (type:Java:Type:Class:CDI:JEE:Injectable)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(annotation:Type)
            RETURN
              type AS Injectable
        ]]></cypher>
    </concept>

    <concept id="cdi:InjectableFieldType">
        <providesConcept refId="jee-injection:Injectable"/>
        <requiresConcept refId="cdi:Stereotype" />
        <description>Returns all types of fields labeled with "CDI", "JEE" and "Injectable".
        </description>
        <cypher><![CDATA[
            MATCH
              (field:Java:Field)-[:OF_TYPE]->(fieldType:Java:TypeCDI:JEE:Injectable)
            RETURN
              fieldType AS Injectable
        ]]></cypher>
    </concept>

    <concept id="cdi:InjectableReturnType">
        <providesConcept refId="jee-injection:Injectable"/>
        <requiresConcept refId="cdi:Stereotype" />
        <description>Returns all return types of methods if these types are labeled with "CDI", "JEE" and "Injectable".
        </description>
        <cypher><![CDATA[
            MATCH
              (method:Java:Method)-[:RETURNS]->(returnType:Java:TypeCDI:JEE:Injectable)
            RETURN
              returnType AS Injectable
        ]]></cypher>
    </concept>


    <concept id="cdi:SingletonScoped">
        <providesConcept refId="jee-injection:Injectable"/>
        <description>Returns all beans labeled with "CDI", "SingletonScoped", "JEE" and "Injectable".
        </description>
        <cypher><![CDATA[
            MATCH
              (t:Type:CDI:SingletonScoped:JEE:Injectable)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(a:Type)
            RETURN
              t AS cdiSingleton
        ]]></cypher>
    </concept>

    <concept id="cdi:Stereotype">
        <description>Returns all annotation types labeled with "CDI" and "Stereotype".
        </description>
        <cypher><![CDATA[
            MATCH
              (stereotype:Type:Annotation:CDI:Stereotype)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(stereotypeType:Type)
            RETURN
              stereotype AS Stereotype
        ]]></cypher>
    </concept>

    <concept id="cdi:Alternative">
        <description>Returns all types labeled with "CDI" and "Alternative".
        </description>
        <cypher><![CDATA[
            MATCH
              (alternative:Type:CDI:Alternative)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(alternativeType:Type)
            RETURN
              alternative AS Alternative
        ]]></cypher>
    </concept>

    <concept id="cdi:Specializes">
        <description>Returns all types and methods labeled with "CDI" and "Specializes".
        </description>
        <cypher><![CDATA[
            MATCH
              (specializes:CDI:Specializes)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(specializesType:Type)
            RETURN
              specializes AS Specialization
        ]]></cypher>
    </concept>

    <concept id="cdi:Delegate">
        <description>Returns all fields labeled with "CDI" and "Delegate".
        </description>
        <cypher><![CDATA[
            MATCH
              (delegate:Field:CDI:Delegate)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(delegateType:Type)
            RETURN
              delegate AS Delegate
        ]]></cypher>
    </concept>

    <concept id="cdi:Decorator">
        <providesConcept refId="jee-injection:Injectable"/>
        <requiresConcept refId="cdi:Delegate"/>
        <description>Returns all types labeled with "CDI", "Decorator", "JEE" and "Injectable".
        </description>
        <cypher><![CDATA[
            MATCH
              (decorator:Type:CDI:Decorator:JEE:Injectable)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(decoratorType:Type)
            RETURN
              decorator AS Decorator
        ]]></cypher>
    </concept>

    <concept id="cdi:EventProducer">
        <requiresConcept refId="jee-injection:InjectionPoint"/>
        <description>Returns all beans labeled with "CDI" and "EventProducer".
        </description>
        <cypher><![CDATA[
            MATCH
              (a:Type:CDI:EventProducer)-[:DECLARES]->(member:Field:CDI:InjectionPoint)
            RETURN
              DISTINCT a.fqn AS cdiEventProducers
        ]]></cypher>
    </concept>

    <concept id="cdi:EventConsumer">
        <requiresConcept refId="jee-injection:InjectionPoint"/>
        <description>Returns all beans labeled with "CDI" and "EventConsumer".
        </description>
        <cypher><![CDATA[
            MATCH
              (a:Type:CDI:EventConsumer)-[:DECLARES]->(member:Method)-[:HAS]->(:Parameter)
            RETURN
              DISTINCT a.fqn AS cdiEventConsumer
        ]]></cypher>
    </concept>

    <concept id="cdi:Named">
        <description>Returns all types or methods labeled with "CDI" and "Named".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:Named)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(namedType:Type)
            RETURN
              e AS Named
        ]]></cypher>
    </concept>

    <concept id="cdi:Default">
        <description>Returns all elements labeled with "CDI" and "Default".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:Default)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(defaultType:Type)
            RETURN
              e AS Default
        ]]></cypher>
    </concept>

    <concept id="cdi:Any">
        <description>Returns all elements labeled with "CDI" and "Any".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:Any)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(anyType:Type)
            RETURN
              e AS Any
        ]]></cypher>
    </concept>

    <concept id="cdi:New">
        <description>Returns all elements labeled with "CDI" and "New".
        </description>
        <cypher><![CDATA[
            MATCH
              (e:CDI:New)-[:ANNOTATED_BY]->()-[:OF_TYPE]->(newType:Type)
            RETURN
              e AS New
        ]]></cypher>
    </concept>

</jqassistant-rules>
